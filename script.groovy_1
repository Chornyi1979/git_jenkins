def incrementVersion() {
	echo "incrementing app version ..."
    sh 'mvn build-helper:parse-version versions:set \
        -DnewVersion=\\\${parsedVersion.majorVersion}.\\\${parsedVersion.minorVersion}.\\\${parsedVersion.nextIncrementalVersion} \
        versions:commit'
    def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
    def version = matcher[0][1]
    env.IMAGE_NAME = "$version-$BUILD_NUMBER"
}

def buildJar() {
	echo "building the application..."
	sh 'mvn clean package'
}

def buildImage() {
	echo "building the docker image..."
    withCredentials([usernamePassword(credentialsId: 'docker-hub-repo', passwordVariable: 'PASS', usernameVariable: 'USER')]) {
        sh "docker build -t chornyi1979/my-repo:${IMAGE_NAME} ."
        sh ('echo $PASS | docker login -u $USER --password-stdin')
        sh "docker push chornyi1979/my-repo:${IMAGE_NAME}"
	}
}
def runTerraform() {
	environment {
	  AZURE_CLIENT_ID = credentials('6c57c00d-ac27-409b-9fc2-dd266529f436')
	  AZURE_CLIENT_SECRET = credentials('6c57c00d-ac27-409b-9fc2-dd266529f436')
	  AZURE_TENANT_ID = credentials('6c57c00d-ac27-409b-9fc2-dd266529f436')
	}
	echo "terraform"
      withCredentials([azureServicePrincipal('6c57c00d-ac27-409b-9fc2-dd266529f436')]) {
	  sh 'az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID'
      }
        dir('terraform') {
	  sh "terraform init"
	  sh "terraform plan"
	  sh "terraform apply --auto-approve"
        }
    
}
def deployApp() {
	echo 'deploying the application...'
	sh 'mvn package com.microsoft.azure:azure-webapp-maven-plugin:2.2.0:deploy'
	
}

def commitVersionUpdate() {
	withCredentials([usernamePassword(credentialsId: 'git_token', passwordVariable: 'PASS', usernameVariable: 'USER')]) {
		sh 'git config --global user.email "jenkins@example.com"'
		sh 'git config --global user.name "jenkins"'
		sh 'git status'
		sh 'git branch'
		sh 'git config --list'
		sh ('git remote set-url origin https://$USER:$PASS@github.com/Chornyi1979/git_jenkins.git')
		sh 'git add .'
		sh 'git commit -m "ci: version bump"'
		
		sh 'git push origin HEAD:main'
	}
}	

return this
